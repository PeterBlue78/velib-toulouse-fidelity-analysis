# -*- coding: utf-8 -*-
"""scripts/snapshot_collector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CZW6Pxr9DoBFxhmza0_PCkqWMYOw3rPo
"""

import os
import time
import json
import requests
import pandas as pd
from datetime import datetime
from pytz import timezone

# === CONFIGURATION ===

# Path to the configuration file containing your JCDecaux API key.
# You must create a file at config/config.json with the following content:
# {
#     "api_key": "YOUR_PERSONAL_API_KEY"
# }
CONFIG_PATH = "config/config.json"

# Load the API key securely (do NOT hard-code it in your script).
with open(CONFIG_PATH, "r") as f:
    config = json.load(f)

API_KEY = config.get("api_key")
CONTRACT = "toulouse"  # JCDecaux contract name for Toulouse
SAVE_DIR = "data/snapshots_velo"  # Directory to save snapshots
os.makedirs(SAVE_DIR, exist_ok=True)  # Create the directory if it doesn't exist

# Timezone configuration for accurate timestamps
paris_tz = timezone("Europe/Paris")


def snapshot_velo():
    """
    Fetches real-time station data from the JCDecaux API
    and saves a snapshot as a Parquet file in the data directory.
    """
    url = f"https://api.jcdecaux.com/vls/v1/stations?contract={CONTRACT}&apiKey={API_KEY}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        df = pd.json_normalize(data)

        now = datetime.now(paris_tz)
        snapshot_time = now.strftime("%Y-%m-%d %H:%M:%S")
        df["snapshot_time"] = snapshot_time  # Add capture timestamp to the dataset

        filename = f"{SAVE_DIR}/snapshot_{now.strftime('%Y%m%d_%H%M')}.parquet"
        df.to_parquet(filename, engine="pyarrow", index=False)

        print(f"[OK] Snapshot saved: {filename}")
    else:
        print(f"[ERROR] API request failed with status code {response.status_code}")


def run_hourly_capture(interval_minutes=5, duration_minutes=60):
    """
    Runs a series of snapshots every X minutes for the specified duration.
    Default: 12 snapshots every 5 minutes over 1 hour.
    """
    iterations = duration_minutes // interval_minutes
    for i in range(iterations):
        print(f"--- Snapshot {i + 1}/{iterations} ---")
        snapshot_velo()
        if i < iterations - 1:
            time.sleep(interval_minutes * 60)


# === MAIN EXECUTION ===
if __name__ == "__main__":
    run_hourly_capture(interval_minutes=5, duration_minutes=60)